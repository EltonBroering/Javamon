package grafica;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.JOptionPane;

import rede.ClienteThread;
import rede.ServidorDaemon;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TelaPrincipal.java
 *
 * Created on 18/11/2013, 06:59:02
 */
/**
 *
 * @author Elton e Flavia<br>
 * <p>
 * Classe principal do programa, JFrame onde todas as outras telas vao dentro.<br>
 * Ela tambem e responsavel por carregar a imagem inicial quando a aplicacao e aberta
 * </p>
 * 
 */
public class TelaPrincipal extends javax.swing.JFrame {

    /** Creates new form TelaPrincipal */
	/**
	 * Inicia a TelaPrincipal que é a classe main do jogo, a principal tela. Ela se mantém até o jogo acabar.
	 */
    public TelaPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
        
    }
    
    private ServidorDaemon hospedeiro;
    ClienteThread cliente;
    private Host h;
    private Selecao s;
    private Conectar c;
    public String nomeAdversario=null;
    AguardeDialog a=new AguardeDialog();   


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPTelaInicial = new Tela();
        jBConectar = new javax.swing.JButton();
        jBHost = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBConectar.setText("Conectar");
        jBConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBConectarActionPerformed(evt);
            }
        });

        jBHost.setText("Host");
        jBHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBHostActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(-16777216,true));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Javamon");

        javax.swing.GroupLayout jPTelaInicialLayout = new javax.swing.GroupLayout(jPTelaInicial);
        jPTelaInicial.setLayout(jPTelaInicialLayout);
        jPTelaInicialLayout.setHorizontalGroup(
            jPTelaInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPTelaInicialLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(jPTelaInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBHost, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .addComponent(jBConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(108, 108, 108))
        );
        jPTelaInicialLayout.setVerticalGroup(
            jPTelaInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPTelaInicialLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                .addGap(115, 115, 115)
                .addComponent(jBHost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(32, 32, 32)
                .addComponent(jBConectar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(82, 82, 82))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2Layout.setHorizontalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel2Layout.createSequentialGroup()
        			.addComponent(jPTelaInicial, GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
        			.addGap(0))
        );
        jPanel2Layout.setVerticalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jPTelaInicial, GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
        );
        jPanel2.setLayout(jPanel2Layout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*
 * Função chamada quando o botão conectar é acionado, abre a janela para o jogador poder botar os dados para se conectar a alguem que esteja
 * como host de uma partida
 */
private void jBConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBConectarActionPerformed
// TODO add your handling code here:
    c= new Conectar(this,true);
    c.setVisible(true);
    
    if(!c.getJTIpConectar().getText().isEmpty() && !c.getJTNameConectar().getText().isEmpty() && c.getControle()){
    s = new Selecao(this);
    
    s.setBounds(0, 0, this.getWidth(), this.getHeight());
    
    s.setVisible(true);

    this.setContentPane(s);
    
    this.jBConectar(c.getJTIpConectar().getText(),c.getJTNameConectar().getText());

    }
    
    //jPTelaInicial=s;
    
}//GEN-LAST:event_jBConectarActionPerformed
/*
 * Função chamada quando o botão host é acionado, ela abre a janela de configuração para o jogador ser host de uma nova partida
 */
private void jBHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBHostActionPerformed
// TODO add your handling code here:
        h = new Host(this,true);
        h.setVisible(true);
        if(!h.jTNameHost1.getText().isEmpty() && h.controle){
        
        
        this.hospedeiro = new ServidorDaemon(1234);
        this.hospedeiro.start();
        System.out.println("Servidor iniciado");
        try {
            Thread.sleep(100);
        } catch (Exception ex) {
        }
        // aguardando um tempo antes de tentar conectar
        this.jBConectar("127.0.0.1",h.jTNameHost1.getText());
        
        //AguardeDialog a=new AguardeDialog();
        //a.setVisible(true);
              	
        
        }
       
        }
       
		protected String listaPokemons;
		/**
		 * Retorna lista dos pokemons escolhidos
		 * @return String que contem lista dos pokemons escolhidos
		 */
		public String getListaPokemons(){
			return listaPokemons;
		}
        /**
         * Funcao que faz a troca para a tela de batalha, ela armazena os pokemons escolhidos em uma String. Segue o padrao [id]=[vida]:[id]=[vida]
         * Ex:0=100:1=100:2=100...
         * @param m
         */
		public void trocaBatalha(String m){
			this.listaPokemons=m;
			((Selecao) this.getContentPane()).trocaBatalha();
		}
		/**
		 * Funcao que faz a troca para a tela de selecao.
		 */
		public void trocaSelecao(){
			s = new Selecao(this);
	        
	        s.setBounds(0, 0, this.getWidth(), this.getHeight());
	        
	        s.setVisible(true);

	        this.setContentPane(s);

		}
    
       
//GEN-LAST:event_jBHostActionPerformed
	/*
	 * Funcao chamada quando botão Conectar é pressionado.Ela abrea a janela de conexão a um novo usuario(Conectar)
	 */
    private void jBConectar(String ip,String nome) {
	
    	
            // fazendo cliente conectar na localhost
            this.cliente = new ClienteThread(this,nome, ip, Integer.parseInt("1234"));
            //disparando a thread
            this.cliente.start();
            
        
    
	
}
    

	/**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jBConectar;
    private javax.swing.JButton jBHost;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPTelaInicial;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

    public boolean b=true;
    /**
     * Adiciona uma mensagem recebida do servidor, e adiciona na janela de chat do jogador.
     * @param msgRecebida Mensagem a ser colocada na tela do jogador
     */
	public void adicionarMensagem(String msgRecebida) {
		// TODO Auto-generated method stub
		if(b){
			s.escreveChat(msgRecebida);
		}else{
			((Batalha) this.getContentPane()).escreveChat(msgRecebida);
		}
	}
	/**
	 * Salva o nome do jogador adversario quando receber a mensagem do servidor com o nome.
	 * @param corpo Nome do jogador adversario
	 */
	public void setNomeAdversario(String corpo) {
		
		this.trocaSelecao();
		this.adicionarMensagem("Bem vindo ao servidor");
		this.nomeAdversario=corpo;
		
	}
	/**
	 * Abre um dialog na tela do jogador avisando para esperar a acao do outro jogador
	 */
	public void espere(){
		a.setVisible(true);
	}
	/**
	 * Faz a tela de alerta/espera desaparecer quando o outro jogador também fizer sua acao
	 */
	public void notEspere(){
		a.setVisible(false);
	}
}
